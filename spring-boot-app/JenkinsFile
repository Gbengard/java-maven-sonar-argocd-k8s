pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock --rm --add-host=host.docker.internal:host-gateway'
    }
  }
  stages {

    stage('Checkout') {
      steps {
        sh 'echo passed'        
      }
    }
    stage('Build and Test') {
      steps {        
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        scannerHome = tool 'Sonar'
      }
      steps {
        script {
          withSonarQubeEnv('Sonar') {
            sh'cd spring-boot-app && mvn sonar:sonar'
          }
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "gbengard/spring-boot-app:${BUILD_NUMBER}"        
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "java-maven-sonar-argocd-k8s"
            GIT_USER_NAME = "gbengard"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "gbengardo@gmail.com"
                    git config user.name "gbengard"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    git fetch origin main
                    git checkout main
                    sed -i "s/image:.*/image: gbengard\\/spring-boot-app:${BUILD_NUMBER}/" spring-boot-app-manifests/deployment.yml                    
                    cat spring-boot-app-manifests/deployment.yml
                    git clean -fd
                    git add spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} main
                '''
            }
        }
    }
  }
}